{"remainingRequest":"/Users/clementlevaillant/VuePress-demo/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/clementlevaillant/VuePress-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/clementlevaillant/VuePress-demo/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/clementlevaillant/VuePress-demo/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/clementlevaillant/VuePress-demo/docs/installation/README.md?vue&type=template&id=ff243e40&","dependencies":[{"path":"/Users/clementlevaillant/VuePress-demo/docs/installation/README.md","mtime":1603289911616},{"path":"/Users/clementlevaillant/VuePress-demo/node_modules/cache-loader/dist/cjs.js","mtime":1594043601075},{"path":"/Users/clementlevaillant/VuePress-demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1603202659032},{"path":"/Users/clementlevaillant/VuePress-demo/node_modules/cache-loader/dist/cjs.js","mtime":1594043601075},{"path":"/Users/clementlevaillant/VuePress-demo/node_modules/vue-loader/lib/index.js","mtime":1603202659032},{"path":"/Users/clementlevaillant/VuePress-demo/node_modules/@vuepress/markdown-loader/index.js","mtime":1603202658973}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}